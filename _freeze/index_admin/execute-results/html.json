{
  "hash": "3a60d94e9003dec69207ff053fded58e",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: \"E. David Aja\"\nfooter:  \"[Personal R Administration](https://github.com/rstats-wtf/wtf-personal-radmin-slides)\"\nlogo: \"img/wtf-logo-square-transparent.png\"\nformat: \n  revealjs: \n    theme: [night, slides.scss]\n    highlight-style: a11y\n    transition: fade\n    slide-number: true\n    chalkboard: true\n    navigation-mode: linear\n    controls: false\n    mermaid-format: svg\nexecute:\n  freeze: auto\nfrom: markdown+emoji\ntitle: personal radmin\nsubtitle: throw your computer into the ocean with confidence\n---\n\n## Course material\n\n::: r-fit-text\n[posit-conf-2024/wtf](https://github.com/posit-conf-2024/wtf)\n:::\n\n## a brief personal history:\n\n::: {.columns .scrollable}\n::: {.column .fragment width=\"33%\"}\n### Auditor\n\n::: r-fit-text\n-   personal laptop {{< fa brands windows >}}\n-   RStudio in Citrix {{< fa brands windows >}}\n-   airgapped Posit Workbench {{< fa brands linux >}}\n-   airgapped Shiny Server Pro {{< fa brands linux >}}\n-   Special Issue Individual Laptop {{< fa brands windows >}} {{< fa brands linux >}}\n-   Special Issue Individual Desktop {{< fa brands windows >}}\n-   Special Issue Team Desktop {{< fa brands windows >}}\n:::\n:::\n\n::: {.column .fragment width=\"33%\"}\n### Data Scientist\n\n::: r-fit-text\n-   personal laptop {{< fa brands windows >}}\n-   work laptop {{< fa brands windows >}}\n-   RStudio in Citrix {{< fa brands windows >}}\n-   RStudio Server {{< fa brands linux >}}\n:::\n:::\n\n::: {.column .fragment width=\"33%\"}\n### Solutions Engineer\n\n::: r-fit-text\n-   personal laptop {{< fa brands windows >}}\n-   work laptop {{< fa brands apple >}}\n-   Posit Workbench Demo Server {{< fa brands linux >}}\n-   Posit Workbench Internal Server {{< fa brands linux >}}\n-   misc ephemeral environments\n:::\n:::\n:::\n\n::: notes\nthis is intended to provide context on my priorities / habits of thought: \n- it needs to work across operating systems \n- You can't depend on having pro features \n- avoid admin where possible\n- as portable as practical\n- audit context means I need to be able to reproduce exactly\n- \"run this command\" preferable to a confluence page of screenshots\n:::\n\n## How do I...\n\n::: incremental\n-   upgrade the version of R I'm using for this project?\n-   track which package versions I'm using for this project?\n-   move this project from one machine to another?\n:::\n\n::: notes\nWe're extending the lessons from Day 1 to think about what it means to work with R projects over time.\\\nThat means that in addition to wanting our individual projects to flow smoothly, we also want to strategize about how to manage different versions of the language, different package versions, and different execution contexts. Working on an old project on a new computer is a lot like trying to put an app into production.\n:::\n\n# warmup\n\n## :package: library\n\n::: {.fragment fragment-index=\"1\"}\n**R packages**\n\n-   the natural unit for distributing R code\n:::\n\n::: {.fragment fragment-index=\"2\"}\n**base R**\n\n-   14 base + 15 recommended packages\n-   ships with all binary distributions of R\n:::\n\n::: {.fragment fragment-index=\"3\"}\n**For example, have you used lattice recently?** 🤷\n\n-   it came with your R installation, can use out of the box\n-   `library(lattice)`\n:::\n\n## Where do packages live locally?\n\n<br>\n\nBy default, in the default library\n\n`.Library`\n\n<br>\n\nAll libraries for the current session\n\n`.libPaths()`\n\n<br>\n\nAll installed packages\n\n`installed.packages()`\n\n\n## explore your package library\n\n```{.r}\nusethis::use_course(\"rstats-wtf/wtf-explore-libraries\")\n# use_course(\"rstats-wtf/wtf-explore-libraries\", destdir = \"my/new/location\")\nusethis::proj_activate(\"/path/to/my/new/location\")\n```\n\n{{< countdown \"7:30\" >}}\n\n# starting R\n\n## why?\n\nSometimes we want to change the way our code behaves *without* having to change the code.\n\n::: notes\nbehaves might mean\n- \"what computer do I think I'm on\" \n- \"is this dev or prod\"?\n:::\n\n## R startup sequence {.smaller background-color=\"#cccccc\"}\n\n::: r-stack\n![](img/R-startup.svg)\n:::\n\n## R startup sequence (our focus) {.smaller background-color=\"#cccccc\"}\n\n::: r-stack\n![](img/r-startup-focus.svg)\n:::\n\n## :warning: Use a newline\n\n::: columns\n::: column\nstartup files **must** end in a newline. <br/> <br/>\n\nR may silently throw away the last line if you don't do this.\n:::\n\n::: column\n![](img/insert-newline-end-highlight.png)\n:::\n:::\n\n## `.Renviron`\n\nenvironment variables\n\n> a \\[...\\] named value that can affect the way running processes will behave on a computer\n\n## what goes in `.Renviron`\n\n:white_check_mark: R-specific environment variables\\\n:white_check_mark: API keys or other secrets\\\n:x: R code\n\n## Editing `.Renviron`\n\n::: {.r .r-fit-text}\n`usethis::edit_r_environ(scope = ?)`\n:::\n\n::: columns\n::: {.column width=\"40%\"}\n### user\n\n`~/.Renviron`\n:::\n\n::: {.column width=\"60%\"}\n### project\n\n`path/to/your/project/.Renviron`\n:::\n:::\n\n## example `.Renviron`\n\n``` bash\nPATH=\"${RTOOLS40_HOME}\\usr\\bin;${PATH}\" # windows users\nCONNECT_API_KEY=DaYK2hBUriSBYUEGIAiyXsRJHSjTYJN3\nR_HISTSIZE=100000\nRETICULATE_PYTHON=.venv/bin/python\nDB_USER=elephant\nDB_PASS=p0stgr3s\n```\n\n## read environment variables\n\n::: {.r .r-fit-text}\n`Sys.getenv()`\n:::\n\n\n## edit your user `.Renviron` {.smaller}\n\n1.  `usethis::edit_r_environ()`\n2.  add `WTF_USER=<your name>_user`\n3.  restart your R session\\\n    `CTRL + SHIFT + F10`\\\n    `CMD  + SHIFT + 0`\n4.  Retrieve the value of WTF_USER `Sys.getenv(\"WTF_USER\")`\n  \n{{< countdown \"2:00\" >}}\n\n## edit your project `.Renviron` {.smaller}\n\n1.  `usethis::edit_r_environ(\"project\")`\n2.  add `WTF_PROJECT=<your name>_project`\n3.  restart your R session\\\n    `CTRL + SHIFT + F10`\\\n    `CMD  + SHIFT + 0`\n4.  Retrieve the value of WTF_PROJECT `Sys.getenv(\"WTF_PROJECT\")`\n\n{{< countdown \"2:00\" >}}\n\n::: question\nwhat's the value of `WTF_USER` after you set `WTF_PROJECT`?\n:::\n\n## `.Renviron` recap\n\nproject `.Renviron` \"short-circuits\"\nif it exists, your user `.Renviron` will not be evaluated\n\n## `.Rprofile`\n\nR code that runs at the start of each session\n\n## ?interactive()\n\n::: columns\n::: column\n### `TRUE`\n\n:technologist: <br/>\n\n-   sending individual lines of code to the console\n\n<br/> <br/>\n\n::: fragment\n:point_up: most `.Rprofile` customization\n:::\n:::\n\n::: column\n### `FALSE`\n\n:robot: <br/>\n\n-   knitting an RMarkdown document\n-   `R -e script.R`\n:::\n:::\n\n## what to put in `.Rprofile`\n\n-   set a default CRAN mirror\n-   customize [R prompt](https://github.com/gaborcsardi/prompt/)\n\n## what *not* to put in `.Rprofile`\n\nIf it matters for code you share, it **should not** be in `.Rprofile`\n\n## why shouldn't these go in `.Rprofile`?\n\n::: incremental\n-   `options(stringsAsFactors = FALSE)`\n-   `library(tidyverse)`\n-   `f <- dplyr::filter`\n-   `theme_set(theme_bw())`\n:::\n\n## discuss with your neighbor\n\n::: question\nWhy *might* these be safe to put in `.Rprofile`?\n:::\n\n<br>\n\n``` r\nlibrary(usethis)\nlibrary(devtools)\n```\n\n{{< countdown \"2:00\" >}}\n\n## dotfiles\n\n::: r-fit-text\nhttps://github.com/search?q=.Rprofile\n:::\n\n## activity\n\n::: panel-tabset\n### edit your user `.Rprofile` {.smaller}\n\n1.  `usethis::edit_r_profile()`\n2.  add `print(\"from my user Rprofile\")`\n3.  restart your R session\\\n    `CTRL + SHIFT + F10`\\\n    `CMD  + SHIFT + 0`\n4.  what value is printed when you restart?\n\n### edit your project `.Rprofile` {.smaller}\n\n1.  `usethis::edit_r_profile(\"project\")`\n2.  add `print(\"from my project Rprofile\")`\n3.  restart your R session\\\n    `CTRL + SHIFT + F10`\\\n    `CMD  + SHIFT + 0`\n4.  what value is printed when you restart?\n:::\n\n{{< countdown \"5:00\" >}}\n\n## `.Rprofile` recap\n\nproject `.Rprofile` \"short-circuits\"\\\nif it exists, your user `.Rprofile` will not be evaluated\n\n## wrapping up\n\n::: columns\n::: column\n### `.Renviron`\n\n-   secrets\n-   environment information\n:::\n\n::: column\n### `.Rprofile`\n\n-   development dependencies\n:::\n:::\n\n::: notes\nEnvironment variables are inherited by child processes, so setting them early in the startup process is valuable Hosting providers trying to deal with secrets will often let you supply environment variables\n:::\n\n# installing R packages\n\n## why\n\n::: r-stack\n![](img/slacking-tidyverse.png)\n:::\n\n::: notes\nhaving a reason to slack off is fun but being able to get your work done quickly is more fun\n:::\n\n## states of R packages\n\n```{mermaid}\n%%{init: {\"theme\": \"dark\" } }%%\ngraph TD\nSource -- \"devtools::build()\" --> Bundled\nBundled -- \"devtools::build(binary = TRUE)\"--> Binary \nBinary --\"install.packages()\"--> Installed \nInstalled --\"library()\"--> Loaded \n```\n\n::: aside\n[R Packages -- Structure](https://r-pkgs.org/Structure.html)\n:::\n\n## states of R packages\n\n```{mermaid}\n%%{init: {\"theme\": \"dark\" } }%%\nflowchart TD\nsubgraph dev\n  direction LR\nSource -- \"devtools::build()\" --> Bundled\nBundled -- \"devtools::build(binary = TRUE)\"--> Binary \nend\nsubgraph use\ndirection LR\nBinary --\"install.packages()\"--> Installed \nInstalled --\"library()\"--> Loaded \nend\n```\n\n::: aside\n[R Packages -- Structure](https://r-pkgs.org/Structure.html)\n:::\n\n::: notes\n-   show how to set options for different environment managers\n-   Install package from github\n-   Develop your own packages\n:::\n\n## Binary\n\n-   compiled ahead of time\n-   easiest / fastest to install\n\n::: notes\nyou may particularly care about installation speed if you're being billed by the minute for compute time, or if you need computations to finish before a timeout\n:::\n\n## where to get binaries\n\n|                                   |        CRAN        | Posit Public Package Manager (p3m) |\n|-----------------------------------|:------------------:|:----------------------------------:|\n| {{< fa brands windows >}} windows | :white_check_mark: |         :white_check_mark:         |\n| {{< fa brands apple >}} mac OS    | :white_check_mark: |         :white_check_mark:         |\n| {{< fa brands linux >}} linux     |        :x:         |         :white_check_mark:         |\n\n## are binaries available?\n\n## CRAN\n\n![](img/connectapi-cran-binary-highlight.png)\n\n## may not be the latest\n\n![](img/parallelly-versions-highlight.png)\n\n## may not be the latest\n\n![](img/compile-from-sources-question.png)\n\n## may not be the latest\n\n``` {.r code-line-numbers=\"6-8\"}\n> install.packages(\"parallelly\", repos = \"https://cran.r-project.org\")\n\nInstalling package into ‘C:/Users/WDAGUtilityAccount/Documents/R/win-library/4.0’\n(as ‘lib’ is unspecified)\n\n  There is a binary version available but the source version is later:\n           binary source needs_compilation\nparallelly 1.31.0 1.32.1             FALSE\n\ninstalling the source package ‘parallelly’\n\ntrying URL 'https://cran.r-project.org/src/contrib/parallelly_1.32.1.tar.gz'\nContent type 'application/x-gzip' length 124853 bytes (121 KB)\ndownloaded 121 KB\n\n* installing *source* package 'parallelly' ...\n** package 'parallelly' successfully unpacked and MD5 sums checked\n** using staged installation\n** R\n** inst\n** byte-compile and prepare package for lazy loading\n** help\n*** installing help indices\n  converting help for package 'parallelly'\n    finding HTML links ... done\n    as.cluster                              html  \n    autoStopCluster                         html  \n    availableConnections                    html  \n    availableCores                          html  \n    availableWorkers                        html  \n    canPortBeUsed                           html  \n    cpuLoad                                 html  \n    find_rshcmd                             html  \n    freeCores                               html  \n    freePort                                html  \n    getOption2                              html  \n    isConnectionValid                       html  \n    isForkedChild                           html  \n    isForkedNode                            html  \n    isLocalhostNode                         html  \n    isNodeAlive                             html  \n    makeClusterMPI                          html  \n    makeClusterPSOCK                        html  \n    parallelly.options                      html  \n    pid_exists                              html  \n    supportsMulticore                       html  \n*** copying figures\n** building package indices\n** testing if installed package can be loaded from temporary location\n*** arch - i386\n*** arch - x64\n** testing if installed package can be loaded from final location\n*** arch - i386\n*** arch - x64\n** testing if installed package keeps a record of temporary installation path\n* DONE (parallelly)\n```\n\n## [Posit Public Package Manager](https://p3m.dev)\n\n![](img/ppm-binaries.png)\n\n## PPM\n\n![](img/rspm-binaries-zoom-highlight.png)\n\n## how do I know I got a binary?\n\n::: panel-tabset\n\n### CRAN {{< fa brands windows >}}\n\n``` {.r code-line-numbers=\"5,10\"}\n> install.packages(\"parallelly\", repos = \"https://cran.r-project.org\")\nInstalling package into ‘C:/Users/edavi/Documents/R/win-library/4.1’\n(as ‘lib’ is unspecified)\ntrying URL 'https://cran.r-project.org/bin/windows/contrib/4.1/parallelly_1.32.1.zip'\nContent type 'application/zip' length 306137 bytes (298 KB)\ndownloaded 298 KB\n\npackage ‘parallelly’ successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\edavi\\AppData\\Local\\Temp\\Rtmpa2s3e8\\downloaded_packages\n```\n\n### CRAN {{< fa brands apple >}}\n\n``` {.r code-line-numbers=\"4,10\"}\n> install.packages(\"renv\", repos=\"https://cran.r-project.org\")\nInstalling package into ‘/Users/edavidaja/Library/R/x86_64/4.1/library’\n(as ‘lib’ is unspecified)\ntrying URL 'https://cran.r-project.org/bin/macosx/contrib/4.1/renv_0.15.5.tgz'\nContent type 'application/x-gzip' length 1866760 bytes (1.8 MB)\n==================================================\ndownloaded 1.8 MB\n\n\nThe downloaded binary packages are in\n /var/folders/b5/fl4ff68d23s148tg1_1gnflc0000gn/T//RtmpMk69B0/downloaded_packages\n```\n\n### p3m\n\n``` {.r code-line-numbers=\"10\"}\n> install.packages(\"remotes\")\nInstalling package into ‘C:/Users/WDAGUtilityAccount/AppData/Local/R/win-library/4.2’\n(as ‘lib’ is unspecified)\ntrying URL 'https://p3m.dev/cran/latest/bin/windows/contrib/4.2/remotes_2.4.2.zip'\nContent type 'binary/octet-stream' length 399930 bytes (390 KB)\ndownloaded 390 KB\n\npackage ‘remotes’ successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n  C:\\Users\\WDAGUtilityAccount\\AppData\\Local\\Temp\\RtmpA1edRi\\downloaded_packages\n```\n\n### renv\n\n``` {.r code-line-numbers=\"5\"}\n> renv::install(\"fs\")\nRetrieving 'https://p3m.dev/cran/latest/bin/windows/contrib/4.2/fs_1.5.2.zip' ...\n  OK [downloaded 380.9 Kb in 0.5 secs]\nInstalling fs [1.5.2] ...\n  OK [installed binary]\nMoving fs [1.5.2] into the cache ...\n  OK [moved to cache in 7.4 milliseconds]\n```\n:::\n\n## pop quiz, hotshot\n\n::: question\nDoes [Posit Public Package Manager](https://p3m.dev) serve a binary of `dplyr` for R 3.6?\n:::\n\n{{< countdown \"2:00\" >}}\n\n## Source\n\n-   compiled in *your* environment\n-   requires extra tools when package uses C, C++, Fortran, Rust, etc.\n\n::: notes\n-   most common reason to install from source is when you want the development version of a package from github One additional complication for \\*nix users:\n-   generally on windows can install and load packages that depend on other lower level libraries quite easily. Explain installing `sf`, for example.\n:::\n\n## if you don't have tools\n\n::: panel-tabset\n### `make`\n\n``` {.r code-line-numbers=\"11\"}\nRunning `R CMD build`...\n* checking for file 'C:\\Users\\WDAGUtilityAccount\\AppData\\Local\\Temp\\RtmpkTUH61\\remotes192027624804\\tidyverse-dplyr-36ef054/DESCRIPTION' ... OK\n* preparing 'dplyr':\n* checking DESCRIPTION meta-information ... OK\n* cleaning src\n* installing the package to process help pages\n      -----------------------------------\n* installing *source* package 'dplyr' ...\n** using staged installation\n** libs\nWarning in system(cmd) : 'make' not found\nERROR: compilation failed for package 'dplyr'\n* removing 'C:/Users/WDAGUT~1/AppData/Local/Temp/Rtmp6hYuyV/Rinst1334d1a23d1/dplyr'\n      -----------------------------------\nERROR: package installation failed\n```\n\n### `g++`\n\n``` {.r code-line-numbers=\"7\"}\nWarning in untar2(tarfile, files, list, exdir, restore_times) :\n  skipping pax global extended headers\n* installing *source* package 'dplyr' ...\n** using staged installation\n** libs\nc:/Rtools/mingw_64/bin/g++ -std=gnu++11  -I\"C:/PROGRA~1/R/R-36~1.3/include\" -DNDEBUG          -O2 -Wall  -mtune=core2 -c filter.cpp -o filter.o\nsh: line 1: c:/Rtools/mingw_64/bin/g++: No such file or directory\nmake: *** [C:/PROGRA~1/R/R-36~1.3/etc/x64/Makeconf:215: filter.o] Error 127\nERROR: compilation failed for package 'dplyr'\n* removing 'C:/Users/edavi/DOCUME~1/projects/WTF-PR~1/renv/staging/1/dplyr'\nError: install of package 'dplyr' failed\n```\n:::\n\n## how to get the tools\n\n::: panel-tabset\n### windows {{< fa brands windows >}}\n\n[Rtools](https://cran.r-project.org/bin/windows/Rtools/)\n\n### macOS {{< fa brands apple >}}\n\n[XCode](https://apps.apple.com/us/app/xcode/id497799835?mt=12)\n\n:warning: don't run right now\n\n``` {.bash code-line-numbers=\"false\"}\nxcode-select --install\n```\n\n### linux {{< fa brands linux >}}\n\ninstall tools via package manager, e.g.\n\n``` bash\napt install make\n```\n:::\n\n## got tools?\n\n::: {.r .r-fit-text}\n`devtools::has_devel()`\n:::\n\n> `## Your system is ready to build packages!`\n\n## system dependencies\n\n::: panel-tabset\n\n### xml2\n\n```{.r code-line-numbers=\"15-18\"}\n* installing *source* package ‘xml2’ ...\n** package ‘xml2’ successfully unpacked and MD5 sums checked\n** using staged installation\nPackage libxml-2.0 was not found in the pkg-config search path.\nPerhaps you should add the directory containing `libxml-2.0.pc'\nto the PKG_CONFIG_PATH environment variable\nPackage 'libxml-2.0', required by 'virtual:world', not found\nPackage libxml-2.0 was not found in the pkg-config search path.\nPerhaps you should add the directory containing `libxml-2.0.pc'\nto the PKG_CONFIG_PATH environment variable\nPackage 'libxml-2.0', required by 'virtual:world', not found\nUsing PKG_CFLAGS=\nUsing PKG_LIBS=-lxml2\n------------------------- ANTICONF ERROR ---------------------------\nConfiguration failed because libxml-2.0 was not found. Try installing:\n * deb: libxml2-dev (Debian, Ubuntu, etc)\n * rpm: libxml2-devel (Fedora, CentOS, RHEL)\n * csw: libxml2_dev (Solaris)\nIf libxml-2.0 is already installed, check that 'pkg-config' is in your\nPATH and PKG_CONFIG_PATH contains a libxml-2.0.pc file. If pkg-config\nis unavailable you can set INCLUDE_DIR and LIB_DIR manually via:\nR CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'\n--------------------------------------------------------------------\nERROR: configuration failed for package ‘xml2’\n* removing ‘/usr/local/lib/R/site-library/xml2’\n\nThe downloaded source packages are in\n\t‘/tmp/Rtmp9JMc7F/downloaded_packages’\nWarning message:\nIn install.packages(\"xml2\") :\n  installation of package ‘xml2’ had non-zero exit status\n```\n\n### `openssl`\n\n```{.r code-line-numbers=\"6-10\"}\n* installing *source* package ‘s2’ ...\n** package ‘s2’ successfully unpacked and MD5 sums checked\n** using staged installation\nTesting compiler using PKG_CFLAGS=\n--------------------------- [ANTICONF] --------------------------------\nConfiguration failed because openssl was not found. Try installing:\n * deb: libssl-dev (Debian, Ubuntu, etc)\n * rpm: openssl-devel (Fedora, CentOS, RHEL)\n * csw: libssl_dev (Solaris)\n * brew: openssl@1.1 (Mac OSX)\nIf openssl is already installed, check that 'pkg-config' is in your\nPATH and PKG_CONFIG_PATH contains a openssl.pc file. If pkg-config\nis unavailable you can set INCLUDE_DIR and LIB_DIR manually via:\nR CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'\n-------------------------- [ERROR MESSAGE] ---------------------------\ntools/version.c:1:10: fatal error: openssl/opensslv.h: No such file or directory\n    1 | #include <openssl/opensslv.h>\n      |          ^~~~~~~~~~~~~~~~~~~~\ncompilation terminated.\n--------------------------------------------------------------------\nERROR: configuration failed for package ‘s2’\n* removing ‘/usr/local/lib/R/site-library/s2’\n```\n\n### `units`\n\n```{.r code-line-numbers=\"8-11\"}\n* installing *source* package ‘units’ ...\n** package ‘units’ successfully unpacked and MD5 sums checked\n** using staged installation\nconfigure: units: 0.8-5\n...\nconfigure: error:\n--------------------------------------------------------------------------------\n  Configuration failed because libudunits2.so was not found. Try installing:\n    * deb: libudunits2-dev (Debian, Ubuntu, ...)\n    * rpm: udunits2-devel (Fedora, EPEL, ...)\n    * brew: udunits (OSX)\n  If udunits2 is already installed in a non-standard location, use:\n    --configure-args='--with-udunits2-lib=/usr/local/lib'\n  if the library was not found, and/or:\n    --configure-args='--with-udunits2-include=/usr/include/udunits2'\n  if the header was not found, replacing paths with appropriate values.\n  You can alternatively set UDUNITS2_INCLUDE and UDUNITS2_LIBS manually.\n--------------------------------------------------------------------------------\n\nSee `config.log' for more details\nERROR: configuration failed for package ‘units’\n* removing ‘/usr/local/lib/R/site-library/units’\n```\n### `gdal`\n\n```{.r code-line-numbers=\"6-9\"}\n* installing *source* package ‘sf’ ...\n** package ‘sf’ successfully unpacked and MD5 sums checked\n** using staged installation\nconfigure: CC: gcc\nconfigure: CXX: g++ -std=gnu++17\nchecking for gdal-config... no\nno\nconfigure: error: gdal-config not found or not executable.\nERROR: configuration failed for package ‘sf’\n* removing ‘/usr/local/lib/R/site-library/sf’\n\nThe downloaded source packages are in\n\t‘/tmp/Rtmp8bqjb0/downloaded_packages’\nWarning message:\nIn install.packages(\"sf\") :\n  installation of package ‘sf’ had non-zero exit status\n```\n\n:::\n\n## bonus complication\n\nruntime dependencies\n\n::: panel-tabset\n\n### :white_check_mark:\n\n```{.r}\n> library(sf)\nLinking to GEOS 3.12.2, GDAL 3.9.1, PROJ 9.4.1; sf_use_s2() is TRUE\n```\n\n### :x:\n\n```{.r}\nThe downloaded source packages are in\n\t‘/tmp/RtmpIvTerY/downloaded_packages’\n> library(sf)\nError: package or namespace load failed for ‘sf’ in dyn.load(file, DLLpath = DLLpath, ...):\n unable to load shared object '/usr/local/lib/R/site-library/units/libs/units.so':\n  libudunits2.so.0: cannot open shared object file: No such file or directory\n```\n:::\n\n## which sysdeps?\n\n![](img/p3m-sysdeps.png)\n\n## activity\n\n::: question\ninstall a package from r-universe\n:::\n\n::: small\n1.  open the `wtf-explore-libraries` project from earlier\n\n2.  `install.packages(\"gitcellar\")` \\# not on cran!\n\n3.  update your project `.Rprofile`:\\\n    `usethis::edit_r_profile(scope = \"project\")`\n\n    ``` {.r code-line-numbers=\"false\"}\n    options(repos = c(\n      ropensci = \"https://ropensci.r-universe.dev\",\n      CRAN = \"https://cloud.r-project.org\", # macOS\n      P3M = \"https://p3m.dev/cran/latest\" # windows\n    ))\n    ```\n\n4.  save `.Rprofile` and restart R\n\n5.  `install.packages(\"gitcellar\")`\n:::\n\n{{< countdown \"5:00\" >}}\n\n## discussion\n\n-   did you install `gitcellar` from binary or source?\n    -   How do you know?\n\n## wrapping up\n\nbinaries are usually preferred, but for development versions of packages, you may need to install from source.\n\n# creating reproducible environments\n\n## why?\n\nput some science in [\"data science\"](https://www.getdbt.com/coalesce-2021/down-with-data-science)\n\n## [reproducibility strategies](https://environments.rstudio.com/reproduce)\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_admin_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## [reproducibility strategies](https://environments.rstudio.com/reproduce) {transition=\"none\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_admin_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n::: notes\nwe're focused in particular on systems where we have both access and responsibility\n:::\n\n## tools\n\n::: columns\n::: column\n### p3m\n\n::: r-stack\n![](img/icon-rspm.png){.r-stretch}\n:::\n:::\n\n::: column\n### renv\n\n::: r-stack\n![](img/renv-small.png){.r-stretch}\n:::\n:::\n:::\n\n::: notes\nrenv has a number of tools that are helpful for adopting a project-based workflow: \n- lockfile records what packages you use and where you instaled them from \n- `renv::install()` can handle installation from remote sources, local sources, package versions, bioconductor, rspm\n- per-project library isolation with global package cache \n- makes it easy to install experimental versions of packages and then roll back to a stable release if it doesn't work out\n:::\n\n## p3m\n\n::: r-stack\n![](img/icon-rspm.png){.r-stretch}\n:::\n\n## p3m: latest\n\n![](img/p3m-latest.png)\n\n## p3m: date-based snapshots\n\n![](img/rspm-2021-03-31-highlight.png)\n\n## activity\n\n::: question\ntime travel!\n:::\n\n1.  open the `wtf-explore-libraries` project\n2.  run `packageVersion(\"dplyr\")`\n\n3.  update your project `.Rprofile` with a date-based snapshot of CRAN\n\n    ``` {.r code-line-numbers=\"false\"}\n    options(repos = c(RSPM = \"https://p3m.dev/cran/2022-12-31\"))\n    ```\n\n4.  Restart R\n\n5.  `install.packages(\"dplyr\")`\n\nwhat version of dplyr did you install?\n\n{{< countdown \"5:00\" >}}\n\n##  ⏪\n\n- remove the repository configuration from your project `.Rprofile`\n- restart R\n- reinstall whatever versions of dplyr you were using before\n\nif that process seems silly, :sparkles: [you should use `renv`](https://github.com/edavidaja/you-should-use-renv) :sparkles:\n\n## renv\n\n::: r-stack\n![](img/renv-small.png){.r-stretch}\n:::\n\n## shared project environment\n\n::: {data-id=\"env\"}\n```{mermaid}\n%%{init: {\"theme\": \"dark\" } }%%\ngraph\nL --- P1\nL --- P2\nL --- P3\nL(library)\nP1(project1)\nP2(project2)\nP3(project3)\n```\n:::\n\n::: notes\n-   by default all of your packages are installed into your user library\n-   the unforunate default behavior in macOS is also that this is the system library\n-   updating a package in the shared environments updates it for *all* of your projects\n:::\n\n<br/>\n\n### `.libPaths()`\n\n``` {.r code-line-numbers=\"false\"}\n> .libPaths()\n[1] \"C:/Users/edavi/AppData/Local/R/win-library/4.4\" # user\n[2] \"C:/Program Files/R/R-4.4.0/library\" # system\n```\n\n## isolated project environments\n\n::: {data-id=\"env\"}\n```{mermaid}\n%%{init: {\"theme\": \"dark\" } }%%\ngraph\nC --- L1\nC --- L2\nC --- L3\nL1 --- P1\nL2 --- P2\nL3 --- P3\nL1(library1)\nL2(library2)\nL3(library3)\nP1(project1)\nP2(project2)\nP3(project3)\nC(global cache)\n```\n:::\n\n<br/>\n\n### `.libPaths()`\n\n``` {.r code-line-numbers=\"false\"}\n- Project '~/sample-project' loaded. [renv 1.0.7]\n> .libPaths()\n[1] \"C:/Users/edavi/Documents/sample-project/renv/library/windows/R-4.4/x86_64-w64-mingw32\"        \n[2] \"C:/Users/edavi/AppData/Local/R/cache/R/renv/sandbox/windows/R-4.4/x86_64-w64-mingw32/88765555\"\n```\n\n## isolated project environments\n\n-   experiment with new packages without breaking other projects\n-   share exactly which versions you're using with your team or future you\n-   re-use packages you've already installed\n\n## activity\n\n::: question\ncreate an isolated project library\n:::\n\n```{.r}\nusethis::create_project(\"wtf-2024\")\ninstall.packages(\"renv\")\nrenv::init()\nrenv::status()\n```\n{{< countdown \"3:00\" >}}\n\n## activity\n\n::: question\nmanage dependencies\n:::\n\nadd `library(parallelly)` to any file in the `wtf-2024/R` directory\n\n```{.r}\nrenv::status()\ninstall.packages(\"parallelly\")\nrenv::status()\nrenv::snapshot()\n```\nremove `library(parallelly)` from the file you added it to\n\n```{.r}\nrenv::status()\n```\n\n{{< countdown \"5:00\" >}}\n\n::: notes\nrun `.libPaths()` to see what your default package libraries are initialize an renv--you'll see that the environment is now local to the project note the .Rprofile that gets placed into your project, which runs an R script in `renv/activate.R` deactivate the environment and check libPaths() again--it should be back to normal\n:::\n\n## `renv.lock` {visibility=\"hidden\"}\n\n``` json\n{\n  \"R\": {\n    \"Version\": \"4.1.2\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://cloud.r-project.org\"\n      }\n    ]\n  },\n  \"Packages\": {\n    [...]\n    \"knitr\": {\n      \"Package\": \"knitr\",\n      \"Version\": \"1.39\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"029ab7c4badd3cf8af69016b2ba27493\",\n      \"Requirements\": [\n        \"evaluate\",\n        \"highr\",\n        \"stringr\",\n        \"xfun\",\n        \"yaml\"\n      ]\n    },\n    ...\n  }\n}\n```\n\n::: notes\ncreated from `renv::snapshot()` by default, identifies dependencies of your code for example: usethis doesn't usually appear in my lockfiles, because I'm running it interactively, rather than making it a dependency of my projects\n:::\n\n## `renv::install()`\n\nor [`install.packages()`](https://rstudio.github.io/renv/articles/renv.html#shims) with shims enabled\n\n``` r\nrenv::install(\"jsonlite\")\nrenv::install(\"jsonlite@1.2\") # at version\nrenv::install(\"jeroen/jsonlite\") # latest\nrenv::install\"jeroen/jsonlite@80854359976250f30a86a6992c0d8c3b3d95473d\") # at SHA\nrenv::install(\"path/to/package\") # local source\n```\n\n<hr>\n\n::: fragment\n``` r\ndevtools::install(\"jsonlite\")\ndevtools::install_version(\"jsonlite@1.2\") # at version\ndevtools::install_github(\"jeroen/jsonlite\") # latest\ndevtools::install_github(\"jeroen/jsonlite@80854359976250f30a86a6992c0d8c3b3d95473d\") # at SHA\ndevtools::install(\"path/to/package\") # local source\n```\n:::\n\n## the junk drawer\n\nfor reprexes, tweets, and other ephemera:\n\n`~/Documents/scratch`\n\n::: notes\nI use `renv` for everything, and have one junk project into which I install things without regard for stability or reproducibility\n:::\n\n# installing / upgrading R\n\n## why\n\n::: r-stack\n![](img/project-oyster-greyed.svg){.r-stretch}\n:::\n\n## why\n\n::: r-stack\n![](img/project-oyster.svg)\n:::\n\n## bigger context\n\n::: r-stack\n![](img/r-project-oyster.svg)\n:::\n\n## practice makes perfect\n\n::: panel-tabset\n### Windows 10+\n\n[Windows Sandbox](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-sandbox/windows-sandbox-overview)\n\n### macOS\n\n[tart](https://tart.run/)  \n[utm](https://mac.getutm.app/)\n\n\n### Linux\n\n[Multipass](https://multipass.run/)\\\n[Digital Ocean](https://www.digitalocean.com/)\\\n[Linode](https://www.linode.com/)\n:::\n\n::: notes\nThe best way to become more comfortable with installing things is to practice in an environment you can throw away\n- the windows sandbox lets you test in an environment on your machine that won't affect your computer\n- enabling it is outside the scope of this course\n- for linux users, the easiest thing to do is stand up a small VPS\n:::\n\n## \"run this command\" \\>\\> clickOps\n\n![](img/installing-R.png)\n\n## package managers\n\nsoftware whose job it is to install other software\n:hear_no_evil: not the same kinds of *packages* as PPM\n\n|                                   | package manager                                |\n|-----------------------------------|------------------------------------------------|\n| {{< fa brands windows >}} windows | [scoop](https://scoop.sh/), chocolatey, winget |\n| {{< fa brands apple >}} macOS     | [homebrew](https://brew.sh/)                   |\n| {{< fa brands linux >}} linux     | [homebrew](https://brew.sh/), apt, yum, zypper |\n\n## :warning:\n\nAvoid installing your language with a package manager\n\n::: notes\nYou want to avoid having the language version your projects are using changed out from you unexpectedly Tools for freezing installations with your package manager are not consistently effective Other software that you install with your package manager may expect that package manager to be running the latest Idiosyncracies of your language will be better understood by a dedicated tool\n:::\n\n## language managers\n\nusing your package manager, install [rig](https://github.com/r-lib/rig):\n\n::: panel-tabset\n### windows\n\n``` {.bash code-line-numbers=\"false\"}\nscoop install rig\n```\n\n### \\*nix\n\n``` {.bash code-line-numbers=\"false\"}\nbrew tap r-lib/rig\nbrew install --cask rig\n```\n:::\n\n::: small\nlanguage managers for other languages:\n\n{{< fa brands python >}} [pyenv](https://github.com/pyenv/pyenv)  \n{{< fa brands node-js >}} [nvm](https://github.com/nvm-sh/nvm)  \n{{< fa brands rust >}} [rustup](https://rustup.rs/)  \n{{< fa globe >}} [asdf](https://asdf-vm.com/)  \n{{< fa globe >}} [mise-en-place](https://mise.jdx.dev/)\n:::\n\n::: notes\n-   many language managers are often written in some language other than the one they are responsible for managing\n:::\n\n## switching R versions {{< fa brands windows >}} {visibility=\"hidden\"}\n\n### `CTRL +  CLICK`\n\n::: r-stack\n![](img/ctrl_click.png)\n:::\n\n## switching R versions {{< fa brands windows >}} {visibility=\"hidden\"}\n\n\n::: r-stack\n![](img/r_version_select_windows-highlight.png)\n:::\n\n## list installed R versions\n\n::: panel-tabset\n\n### {{< fa brands windows >}}\n\n```{.bash}\n❯ rig list --help\nDescription:\n  List installed R versions at `C:\\Program Files\\R`.\n  It does _not_ check if they are working properly.\n\n  `rig ls` is an alias.\n```\n\n### {{< fa brands apple >}}\n\n```{.bash}\n❯ rig list --help\nDescription:\n  List installed R versions from `/Library/Framework/R.framework/Versions`.\n  It does _not_ check if they are working properly.\n\n  `rig ls` is an alias.\n```\n\n### {{< fa brands linux >}}\n\n```{.bash}\n❯ rig list --help\nDescription:\n  List installed R versions from `/opt/R`. It does _not_ check if they are\n  working properly.\n\n  `rig ls` is an alias.\n```\n\n:::\n\n## language versions\n\nusing `rig`, install a version of R:\n\n```{.bash}\n❯ rig install --help\nDescription:\n  Download and install an R version, from the official sources.\n  It keeps the already installed R versions, except versions within the\n  same minor branch, see below.\n\nOptions:\n      --without-cran-mirror\n          Do not set the cloud CRAN mirror\n\n      --without-pak\n          Do not install pak.\n\n      --pak-version <pak-version>\n          pak version to install.\n\n          [default: stable]\n          [possible values: stable, rc, devel]\n\n  -a, --arch <arch>\n          Select macOS arch: arm64 or x86_64\n\n          [default: arm64]\n          [possible values: arm64, x86_64]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nExamples:\n  # Add the latest development snapshot\n  rig add devel\n\n  # Add the latest release\n  rig add release\n\n  # Install specific version\n  rig add 4.1.2\n\n  # Install latest version within a minor branch\n  rig add 4.1\n\n  # Install arm64 build of R (default on arm64 macs)\n  rig add -a arm64 release\n\n  # Install x86_64 build of R (default on x86_64 macs)\n  rig add -a x86_64 release\n```\n\n::: notes\nif you're running a distribution of linux that rig doesn't support: - https://docs.rstudio.com/resources/install-r/\n\nif no pre-compiled binary of R is available: - https://docs.rstudio.com/resources/install-r-source/\n:::\n\n## switching default versions\n\n```{.bash}\n❯ rig switch --help\nDescription:\n  Print or set the default R version. The default R version is the one that\n  is started with the `R` command, usually via the `/usr/local/bin/R`\n  symbolic link.\n\n  `rig switch` is an alias of `rig default`.\n\nUsage: rig default [OPTIONS] [version]\n\nArguments:\n  [version]\n          new default R version to set\n\nOptions:\n      --json\n          JSON output\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nExamples:\n  # Query default R version\n  rig default\n\n  # Set the default version\n  rig default 4.1\n```\n\n## launch rstudio\n\n```{.bash}\n❯ rig rstudio --help\nDescription:\n  Start RStudio with the specified R version.\n\n  If the RStudio project or the specified directory contains an `renv.lock`\n  file (created by the renv package), and `version` is not specified, then\n  rig will read the preferred R version from the `renv.lock` file.\n  If the same exact version is not installed, then rig chooses\n  the latest version with the same major and minor components. If no such\n  version is available, rig throws an error.\n\nExamples:\n  # With default R version\n  rig rstudio\n\n  # With another R version\n  rig rstudio 4.0\n\n  # Open project with default R version\n  rig rstudio cli.Rproj\n\n  # Open renv project with the R version specified in the lock file\n  rig rstudio projects/myproject/renv.lock\n\n  # Open RStudio project with specified R version, either is good\n  rig rstudio 4.0 cli.Rproj\n  rig rstudio cli.Rproj 4.0\n\nUsage: rig rstudio [version] [project-file]\n\nArguments:\n  [version]\n          R version to start\n\n  [project-file]\n          RStudio project file (.Rproj) to open\n```\n\n## activity\n\n::: question\nmigrate a project from one R version to another\n:::\n\n1. use `renv::snapshot()` to create an `renv.lock` file\n2. close RStudio\n3. launch RStudio with a different R version\n4. use `renv::restore()` to restore your project\n\n{{< countdown \"7:00\" >}}\n",
    "supporting": [
      "index_admin_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}