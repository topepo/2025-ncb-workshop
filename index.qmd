---
title: "Making Project Work Better with R"
author: "Max Kuhn, E. David Aja, and others"
footer:  "[Making Project Work Better with R]()"
logo: "img/wtf-logo-square-transparent.png"
format: 
  revealjs: 
    height: 900
    width: 1600
    theme: [night, slides.scss]
    highlight-style: a11y
    transition: fade
    slide-number: true
editor: visual
from: markdown+emoji
execute:
  freeze: auto
---

# Getting started

```{r}
library(countdown)
```

```{r font-awesome-color}
# fill for font awesome icons
fa_fill <- "#C7B41D"
```

## Licensing

<br>

This work is licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-sa/4.0/) (CC BY-SA4.0).

<br>

  - Part 1: Original sides were authored by [**Shannon Pileggi**](https://www.pipinghotdata.com/){target="_blank"}, some added or altered by [**Max Kuhn**](https://max-kuhn.org/){target="_blank"}

- Part 2: [**Max Kuhn**](https://max-kuhn.org/){target="_blank"}  largely created these

- Part 3: Created from [**E. David Aja**](https://edavidaja.com/){target="_blank"}'s previous work

Other authors are identified on a slide-by-slide basis. 

None of this would exist without vision (and patience) of [**Jennifer Bryan**](https://jennybryan.org/){target="_blank"}

## Checklist

<br>

`r fontawesome::fa("check", fill = fa_fill)` R installed? Pretty recent?

     Recommended R ≥ 4.4.1  (4.5.0 has `r emo::ji("penguin")` though)

`r fontawesome::fa("check", fill = fa_fill)` RStudio installed?

`r fontawesome::fa("check", fill = fa_fill)` Packages?

```{r}
#| label: inst
#| eval: false
#| echo: true

install.packages("pak")
library(pak)

pkgs <- c("cli", "epoxy", "fs", "glue", "gtExtras", "gtsummary", "hadley/emo", 
          "here", "prettyunits", "rmarkdown", "tidyverse", "usethis", "xfun")
pak(pkgs)
```

## Resources

<br>

Book: [What They Forgot to Teach You About R](https://rstats.wtf/){target="_blank"}

<br>

Book: [Happy Git and GitHub for the useR](https://happygitwithr.com/){target="_blank"}

<br> 

Website: [Tidyteam code review principles](https://code-review.tidyverse.org/){target="_blank"}

## 

<br>

::: {.center-x .r-fit-text}
What [*Did*]{.important} They Forget <br> to Teach You?
:::

##  {background-image="img/everything-else.PNG"}

## Syntax aside: tildes

In a character string, what does `"~"` indicate?

<br> 

. . .

The _home_ directory on your computer. 

. . .


:::: {.columns}

::: {.column width="50%"}

For example, on my mac, it is `/Users/max`

:::

::: {.column width="50%"}

On windows it is the user's home directory. 

_Probably_ at:

 - `C:\Users\username`
 - but really it is wherever `%UserProfile%` points to
:::

::::


<br> <br> 


. . . 

You should *never use absolute paths* but, if you do, make them platform agnostic using the tilde. 


## Syntax aside: pipes

-   2014+ magrittr pipe `%>%`

-   2021+ (R $\geq$ 4.1.0) native R pipe `|>`

2022 Isabella Velásquez Understanding the native R pipe \|\> <https://ivelasq.rbind.io/blog/understanding-the-r-pipe/>

. . .

<brshort>

:::::: columns
::: {.column width="50%"}
```{r echo=TRUE, eval=FALSE}
whatever(arg1, arg2, arg3, ...)
arg1 |>  
  whatever(arg2, arg3)
```
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
```{r echo=TRUE, eval=FALSE}
mean(0:10)
0:10 |> 
  mean()
```
:::
::::::

::: footer
Change `CTRL + Shift + M` shortcut to native pipe:

`Tools -> Global Options -> Code ->`

   `Editing -> check Use Native Pipe Operator`
:::

## Syntax aside: namespacing

`dplyr::select()`

-   tells R explicitly to use the function `select` from the package `dplyr`

-   can help to avoid name conflicts (e.g., `MASS::select()`)

-   does not require `library(dplyr)`

. . .

:::::: columns
::: {.column width="45%"}
```{r echo=TRUE, eval=FALSE}
library(dplyr)
select(mtcars, mpg, cyl) 
mtcars |>  
  select(mpg, cyl) 
```
:::

::: {.column width="5%"}
:::

::: {.column width="50%"}
```{r echo=TRUE, eval=FALSE}
# library(dplyr) not needed
dplyr::select(mtcars, mpg, cyl) 
mtcars |>  
  dplyr::select(mpg, cyl) 
```
:::
::::::


## Syntax aside: Rmd/qmd chunk options

<br>

We've probably all be used to a knitr computing chunk that looks like this:

````markdown
`r '' ````{r chunk_name, echo = TRUE, eval = FALSE}

summary(mtcars)
```
````

. . .

<br>

The more modern version uses `yaml` arguments: 

````markdown
`r '' ````{r}
#| label: chunk_name
#| echo: true
#| eval: false

summary(mtcars)
```
````

# Part 1: Organized Projects {background-color="#A60A3D"}

## Be organized as you go, <br> not "tomorrow"

:::::: columns
::: {.column width="50%"}
Don't fret over past mistakes.

![](img/beer-house.png)
:::

::: {.column width="4%"}
:::

::: {.column .fragment width="46%"}
Raise the bar for new work.

![](img/beer-organized.png)
:::
::::::

## Be organized

<br>

<br>

::: r-fit-text
self-explaining `>>>` wordy, needy explainers
:::

## Be organized

::::::: {.columns .v-center-container}
::: {.column width="45%"}
![](img/packages-report-example.png)
:::

:::: {.column width="10%"}
::: r-fit-text
`>>>`
:::
::::

::: {.column width="45%"}
  file salad <br>   + an out of date README
:::
:::::::

## Good enough practices in scientific computing

:::::: {.columns .v-center-container}
::: {.column width="45%"}
![](img/airplane-duct.png)
:::

::: {.column width="2%"}
:::

::: {.fragment .column width="53%"}
*PLOS Computational Biology*

Wilson, Bryan, Cranston, Kitzes, Nederbragt, Teal (2017)

<https://doi.org/10.1371/journal.pcbi.1005510>

<http://bit.ly/good-enuff>
:::
::::::

# Practical Example: 

## Predictors of reproductive toxicity

Original GH repo for [publication](https://scholar.google.com/scholar?hl=en&as_sdt=0%2C7&q=More+than+just+hormones%3A+H295R+cells+as+predictors+of+reproductive+toxicity&btnG=) (circa 2012):


[https://github.com/topepo/steroidogenic_tox](https://github.com/topepo/steroidogenic_tox)

<br>

. . .


Refactored to look like a modern data analysis project: 

[https://github.com/topepo/steroidogenic-tox-wtf](https://github.com/topepo/steroidogenic-tox-wtf)


. . .

<br>

Normally, I would put the Quarto report/summary in a `reports` directory but using `index.qmd` I get a [free website out of it](https://topepo.github.io/steroidogenic-tox-wtf/).


# Project-oriented workflows

## Adopt a project-oriented workflow

<br>

:::::: columns
::: {.column width="48%"}
### Why

-   work on more than 1 thing at a time

-   the things are fairly similar

-   collaborate, communicate, distribute

-   start and stop
:::

::: {.column width="4%"}
:::

::: {.column .fragment width="48%"}
### How

-   dedicated directory

-   have a template to follow

-   RStudio <ins>**P**</ins>roject

-   Git repo, probably syncing to a remote
:::
::::::

## If the top of your script is

<br>

```{r, eval=FALSE, echo=TRUE}
setwd("C:\Users\jenny\path\that\only\I\have")
rm(list = ls())
```

...


. . . 

:::: {.columns}

::: {.column width="7%"}

:::

::: {.column width="40%"}
![](img/fire-1.jpeg)
:::

::: {.column width="10%"}

:::

::: {.column width="40%"}
![](img/fire-2.jpeg)
:::

::::

::: footer
<https://twitter.com/hadleywickham/status/940021008764846080>

<https://www.tidyverse.org/articles/2017/12/workflow-vs-script/>

:::

## Which persist after rm(list = ls())?

| Option | Persists? |
|------------------------------------------------------|------------------|
| A. library(dplyr) | `r fontawesome::fa("check", fill = "#343838")` |
| B. summary \<- head | `r fontawesome::fa("xmark", fill = "#343838")` |
| C. options(stringsAsFactors = FALSE) | `r fontawesome::fa("check", fill = "#343838")` |
| D. Sys.setenv(LANGUAGE = "fr") | `r fontawesome::fa("check", fill = "#343838")` |
| E. x \<- 1:5 | `r fontawesome::fa("xmark", fill = "#343838")` |
| F. attach(iris) | `r fontawesome::fa("check", fill = "#343838")` |

```{r}
countdown(
  minutes = 2
  )
```

## Which persist after rm(list = ls())?

| Option | Persists? |
|------------------------------------------------------|------------------|
| A. library(dplyr) | `r fontawesome::fa("check", fill = fa_fill)` |
| B. summary \<- head | `r fontawesome::fa("xmark", fill = "white")` |
| C. options(stringsAsFactors = FALSE) | `r fontawesome::fa("check", fill = fa_fill)` |
| D. Sys.setenv(LANGUAGE = "fr") | `r fontawesome::fa("check", fill = fa_fill)` |
| E. x \<- 1:5 | `r fontawesome::fa("xmark", fill = "white")` |
| F. attach(iris) | `r fontawesome::fa("check", fill = fa_fill)` |

## What does it mean to be an RStudio <ins>**P**</ins>roject?

<br>

RStudio leaves notes to itself in foo.Rproj

. . .

<br>

Open Project = dedicated instance of RStudio

-   dedicated R process

-   file browser pointed at Project directory

-   working directory set to Project directory

## Many projects open

<br>

![](img/many-projects.jpg)

## Use a "blank slate"

<br>

```{r, eval=FALSE, echo=TRUE}
usethis::use_blank_slate()
```

<br>

OR

<br>

Tools -\> Global Options

![](img/workspace.PNG)

## Get (git) vaccinated!!!


<br> 


:::::: columns
::: {.column width="50%"}
![](img/vaccinate.jpeg)
:::

::: {.column width="4%"}
:::

::: {.column width="46%"}


```r
usethis::git_vaccinate()
```

<br>

> Adds `.Rproj.user`, `.Rhistory`, `.Rdata`, `.httr-oauth`, `.DS_Store`, and `.quarto` to your global (a.k.a. user-level) `.gitignore`. This is good practice as it decreases the chance that you will accidentally leak credentials to GitHub.

:::
::::::





## Restart R often

<br>

:::::: columns
::: {.column width="48%"}
Session -\> Restart R

![](img/restart.jpg)
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
Windows

-   Ctrl + Shift + F10

Mac

-   Cmd + Shift + 0

-   Cmd + Shift + F10
:::
::::::

## Project initiation: the local case

1.  New folder + make it an RStudio Project

-   `usethis::create_project("~/i_am_new")`

-   File -\> New Project -\> New Directory -\> New Project

. . .

2.  Make existing folder into an RStudio Project

-   `usethis::create_project("~/i_exist")`

-   File -\> New Project -\> Existing Directory

. . .

::: question
Try option 1 now.
:::

```{r}
countdown(
  minutes = 2
  )
```

# Safe paths

## On reproducibility of code

:::::: columns
::: {.column width="50%"}
![](img/kieran-healy-setwd.PNG)
:::

::: {.column width="4%"}
:::

::: {.column width="46%"}
<br> A large-scale study on research code quality and execution. <br> Trisovic, A., Lau, M.K., Pasquier, T. et al. <br> *Sci Data* **9**, 60 (2022).
:::
::::::

::: footer
<https://twitter.com/kjhealy/status/1514169782060429320> <br> <https://doi.org/10.1038/s41597-022-01143-6>
:::

## Do you know where<br> your files are?

![](img/street-sign.png)

::: notes
Working directory is associated with a specific process or running application.

For a newly launched process or application instance, the working directory (probably? usually?) defaults to user's home directory. Or perhaps the application consults a config file to set the working directory at launch time. This is sort of how I would describe launching an RStudio Project.

"Working directory" as a concept is not comparable to "home directory". "Home directory" is a static, persistent thing.
:::

## Practice "safe paths"

<br>

relative to a [stable base]{.important}

<br>

use [file system functions]{.important}

    not paste(), strsplit(), etc.

## Packages with file system functions

<br>

```{r, eval=FALSE, echo=TRUE}
install.packages("fs")
```

`fs` = file path handling

<br>

. . .

```{r, eval=FALSE, echo=TRUE}
install.packages("here")
```

`here` = project-relative paths

## Examples of a stable base

<brshort>

Project directory

```{r, echo=TRUE, eval=FALSE}
here::here("data", "raw-data.csv")
here::here("data/raw-data.csv")
```

*Automatically complete paths with `Tab`.*

<brshort>

. . .

User's home directory

```{r, echo=TRUE, eval=FALSE}
file.path("~", ...)
fs::path_home(...)
```

. . .

<brshort>

Official location for installed software

```{r, echo=TRUE, eval=FALSE}
library(thingy)
system.file(..., package = "thingy")
```

*See example in [gapminder readme](https://github.com/jennybc/gapminder#plain-text-delimited-files).*

::: notes
see where tilde goes with fs::path_expand(file.path("\~"))
:::

## Absolute paths

I have nothing against absolute paths.

Some of my best friends are absolute paths!

But don't hard-wire them into your scripts.

Instead, form at runtime relative to a [stable base]{.important}

<brshort>

```{r, echo=TRUE, eval=FALSE}
> (BAD <- "/Users/shannon/tmp/test.csv")
[1] "/Users/shannon/tmp/test.csv"
```

. . .

<brshort>

```{r, echo=TRUE, eval=FALSE}
> (GOOD <- fs::path_home("tmp/test.csv")
[1] "/Users/shannon/tmp/test.csv"
```

## Practice safe paths

:::::: columns
::: {.column width="50%"}
![](img/here.png)
:::

::: {.column width="4%"}
:::

::: {.column .fragment width="46%"}
-   Use the `here` package to build paths inside a project.

-   Leave working directory at top-level at all times, during development.

-   Absolute paths are formed at runtime.
:::
::::::

::: footer
Artwork by [\@allison_horst](https://twitter.com/allison_horst).
:::

## here example

```{r, echo=TRUE, eval=FALSE}
ggsave(here::here("figs", "built-barchart.png"))
```

-   Works on my machine, works on yours!

-   Works even if working directory is in a sub-folder.

-   Works for RStudio <ins>**P**</ins>rojects, Git repos, R packages, etc.

-   Works with knitr / rmarkdown.

## here::here()

The `here` package is designed to work inside a project, where that could mean:

-   RStudio <ins>**P**</ins>roject

-   Git repo

-   R package

-   Folder with a file named .here

`here::here()` does not create directories; that's your job.

## Kinds of paths

Absolute path.

```{r, echo=TRUE, eval=FALSE}
dat <- read.csv("C:/Users/pileggis/Documents/wtf-fix-paths/data/installed-packages.csv")
```

<br>

Relative path to working directory, established by the RStudio <ins>**P**</ins>roject.

```{r, echo=TRUE, eval=FALSE}
dat <- read.csv("data/installed-packages.csv")
```

<br>

Relative path within the RStudio <ins>**P**</ins>roject directory.

```{r, echo=TRUE, eval=FALSE}
dat <- read.csv(here::here("data/installed-packages.csv"))
```

## Your turn

<br>

Practice calling `here::here()` in a project <br> to get a feel for it.

<br>

```{r, echo=TRUE, eval=FALSE}
library(usethis)
# saves project on desktop by default for most users
use_course("rstats-wtf/wtf-fix-paths")
# use_course("rstats-wtf/wtf-fix-paths", destdir = "my/new/location")
# can alternatively download from 
# https://github.com/rstats-wtf/wtf-fix-paths
```

<br> Read the `README.md` to get started.

```{r}
countdown(
  minutes = 10
  )
```

## What if my data can't live in my project directory? {.smaller}

1.  Are you sure it can't?

2.  Review the Good Enough Practices paper for tips.

3.  Create a symbolic link to access the data. ([fs::link_create()](https://fs.r-lib.org/reference/create.html), [fs::link_path()](https://fs.r-lib.org/reference/create.html))

4.  Put the data in an [R package](https://r-pkgs.org/data.html).

5.  Use [pins](https://pins.rstudio.com/).

6.  Explore other data warehousing options.

RStudio Community threads:

-   [Project-oriented workflow; setwd(), rm(list = ls()) and computer fires](https://community.rstudio.com/t/project-oriented-workflow-setwd-rm-list-ls-and-computer-fires/3549/1)

-   [Best way to define paths for a file running on a cron?](https://community.rstudio.com/t/best-way-to-define-paths-for-a-file-running-on-a-cron/2061/7)

# Names matter

## 

:::::: {.columns .v-center-container}
::: {.column .small .hand width="60%"}
’Tis but thy name that is my enemy;<br> Thou art thyself, though not a Montague.<br> What’s Montague? It is nor hand, nor foot,<br> Nor arm, nor face, nor any other part<br> Belonging to a man. O, be some other name!<br> [What’s in a name? That which we call a rose]{.important}<br> [By any other name would smell as sweet;]{.important}<br> So Romeo would, were he not Romeo call’d,<br> Retain that dear perfection which he owes<br> Without that title. Romeo, doff thy name;<br> And for thy name, which is no part of thee,<br> Take all myself.
:::

::: {.column width="5%"}
:::

::: {.column .fragment .center-x width="35%"}
This

is

[not]{.important}

[true]{.important}

for

file

names.
:::
::::::

::: footer
From Danielle Navarro's *Project Structure* slides

<https://slides.djnavarro.net/>
:::

## Names matter

<br>

machine readable

<br>

human readable

<br>

sort nicely

<br>

optimized for tab-complete

## 

::: question
What features differentiate 😔 vs 😍?
:::

:::::::: columns
::::: {.column width="10%"}
<br>

::: r-fit-text
😔
:::

<br>

<br>

::: r-fit-text
😍
:::
:::::

::: {.column width="4%"}
:::

::: {.column .small width="86%"}
myabstract.docx

Joe's Filenames Use Spaces and Punctuation.xlsx

figure 1.png

homework1.R

JW7d\^(2sl\@deletethisandyourcareerisoverWx2\*.txt

<br>

2018-01_bryan-abstract-rstudio-conf.docx

joes-filenames-are-getting-better.xlsx

fig01_scatterplot-talk-length-vs-interest.png

bryan_hw01.R

1986-01-28_raw-data-from-challenger-o-rings.txt
:::
::::::::

```{r}
countdown(
  minutes = 1
  )
```

## Names machines like {.smaller}

1.  don't leave white space

. . .

2.  use letters, numbers, hyphens and underscores... that's it <br> (characters like \^.\*?+\|\$ can have a special meaning)

. . .

3.  be consistent with case <br> (some operating systems treat a and A the same, some differently).

. . .

4.  use separator characters wisely

    use underscore `_` to separate different chunks

    use hyphen `-` for words in the same chunk

. . .

<br>

This creates names that are regular expression and globbing friendly, and easy to compute on! 🎉

::: footer
Adapted from <br> <https://djnavarro.net/slides-project-structure/#1>.
:::

## Names humans like

<br>

name contains info on content

name anticipates context

concept of a slug 🐌 from user-friendly URLs

-   1986-01-28\_`raw-data-from-challenger-o-rings`.txt

-   concise, meaningful description

-   usually appended to the end

::: notes
Note: A URL slug is the part of the URL after the last backslash - important for keyword SEO
:::

## Names that sort nicely

<br>

put something numeric in there

left pad with zeros for constant width, nice sorting, `01`

use the ISO 8601 standard for dates, `YYYY-MM-DD`

order = chronological or ... consider common sense

## ISO 8601

::::::: {.columns .v-center-container}
::: {.column width="40%"}
![](img/jenny-chicken-broth.PNG)
:::

::: {.column width="4%"}
:::

:::: {.column width="56%"}
::: r-fit-text
YYYY-MM-DD

ISO 8601
:::

<https://www.iso.org/iso-8601-date-and-time-format.html>
::::
:::::::

::: footer
<https://twitter.com/JennyBryan/status/816143967695687684>
:::

## 👍 file names {.center-x}

![](img/file-names-01.png)

. . .

Anyone can guess at file's purpose

## 👍 file names {.center-x}

![](img/file-names-02.png)

Easy to filter in R (or the shell or whatever)

## 👍 file names {.center-x}

![](img/file-names-03.png)

Intentional delimiters means meta-data is easily recovered.

`_` delimits fields; `-` delimits words

## 👍 file names {.center-x}

![](img/file-names-04.png)

Sorts in the same order as you <br> experience in real life.

## Names matter

<br>

machine readable, human readable, and sort nicely

<br>

. . .

easy to implement NOW

<br>

payoffs accumulate as your skills evolve and <br> projects get more complex

# Project structure

## Break logic and output into pieces

![](img/monolith.jpg)

## Process

![](img/process-naked.jpg)

::: footer
<https://r4ds.had.co.nz/introduction.html#what-you-will-learn>
:::

## Project code

::::::: {.columns .v-center-container}
::: {.column width="30%"}
smell.test.R

wrangle.R

model.R

make-figs.R

report.Rmd
:::

:::: {.column width="10%"}
::: r-fit-text
`>>>`
:::
::::

::: {.column width="35%"}
    everything.R
:::
:::::::

## Process and code

![](img/process-script.jpg)

## Project artifacts

::::::: {.columns .v-center-container}
::: {.column width="30%"}
raw-data.xlsx

data.csv

fit.rds

ests.csv
:::

:::: {.column width="10%"}
::: r-fit-text
`>>>`
:::
::::

::: {.column .center-x width="30%"}
.Rdata
:::
:::::::

## Process and artifacts

![](img/process-out.jpg)

## A humane API for analysis

![](img/input-code-output.jpg)

## Max's Preference

- `raw_data`: original source data (e.g., xls*, csv, images, etc)
- `code`: source files for import, preprocessing, analysis, summaries
- `rdata`: location for any {`.RData`, `.rds`, `.rda`} files that will be used later
- `reports`: files and sub-directories created for dissemination (`[Rq]md` files). 
- `exports`: objects that are given to someone else (e.g., model object, shiny app)

<br> 

Subjective but thought out. 


## Max's Preference

<br><br>

```r
usethis::create_project("~/potato")

# ... wait for it

fs::dir_ls()

fs::dir_delete("R")

purrr::walk(
  c("code", "rdata", "raw_data", "reports", "exports"),
  fs::dir_create
)
```



## A little bit on partial automation

 If your project requires many computing iterations because:
 
 - the project requires a lot of data transformations _and_ 
 - the rows may change (in number or value)
 
then think about how you would automate some parts. 

<br>

Using [`makefiles`](https://makefiletutorial.com/) or the [targets package](https://books.ropensci.org/targets/) could be a lifesaver. 

<br>

You'll want to make sure that the raw data and intermediary data are consistent with the results you give to your clients. 

<br>

But you probably can't automate interpretation. 


# Part 2: Resilient Reports {background-color="#A60A3D"}


```{r}
#| label: load
#| include: false
library(cli)
library(glue)
library(epoxy)
library(prettyunits)
library(xfun)
library(scales)
library(tidyverse)
library(gt)
library(gtExtras)
library(gtsummary)
```

## What's your horror story?

So many of my projects went through different rounds of adding and removing rows of data. 

<br> 

The cascading effect wreaks havoc on reports, tables, and _interpretation_. 

<br> 

**Someone tell their worst experience (or I will)**

<br> 

How can you avoid as much of this as possible?

## Treat writing like coding

1. Write for the most general result. 

2. Never hard-code a number

3. Think about the end result. What format will it be? 


The lesson of most of this workshop is

# Tooling doesn't define you.  {background-color="#EF7C12FF"}

# But it can catalyze your efficiency and effectiveness.  {background-color="#F7AA14FF"}

# Tools, tools, tools

<br> 

You might want to invest some time into good tools for reporting. 

. . .

<br> 

First, we'll talk about writing text with the help of R packages (no AI involved). 

. . .

<br>

Then tables. 

. . .

<br> 

And a little about figures. 




## `cli` and `glue`

- These two packages have excellent features for writing text from data. 

- They do many of the same things and your preference may vary. 

- `glue` tends to be better for simple things

- `cli` can do more, especially for writing output in your code

- Sites of interest: 

  - [https://glue.tidyverse.org/](https://glue.tidyverse.org/)
  - [https://cli.r-lib.org/](https://cli.r-lib.org/)
  - [`cli` pluralization](https://cli.r-lib.org/reference/pluralization.html)
  - [`cli` inline formatting](https://cli.r-lib.org/reference/inline-markup.html)

<br> 

Also, the [`epoxy` package](https://github.com/gadenbuie/epoxy) extends glue. 


## The `cli` package ...


```{r}
#| label: cli-pluralize-1
#| echo: true
#| results: false

library(cli)

num_samples <- 12
groups <- c("control", "low dose", "high dose")

format_inline("{num_samples} sample{?s} {?was/were} available with groups: {groups}")

# This gives us:
```


> `r format_inline("{num_samples} sample{?s} {?was/were} available with groups: {groups}")`


## ... and friends

```{r}
#| label: cli-pluralize-2
#| echo: true
#| results: false
#| warning: false
library(xfun)  # numbers_to_words()
library(tools) # toTitleCase()

# Order counts in the nested braces:
format_inline(
  "{numbers_to_words(qty(groups))} {qty(groups)}group{?s}: 
   {.or {.val {toTitleCase(groups)}}}",
   keep_whitespace = FALSE) 

# Now we have: 
```

> `r format_inline("{numbers_to_words(qty(groups))} {qty(groups)}group{?s}: {.or {.val {toTitleCase(groups)}}}", keep_whitespace = FALSE) `


## Nice data conversions


```{r}
#| label: cli-and-scales
#| echo: true
#| results: hide

library(scales)

ord <- scales::label_ordinal()
scale_p <- scales::pvalue_format() # or prettyunits::pretty_p_value()

pvals <- c(0.02, 0.000001)
format_inline("The { {ord(1:2)} } p-values were {scale_p(pvals)}")
```

> `r format_inline("The { {ord(1:2)} } p-values were {scale_p(pvals)}")`


<br> 


```{r}
#| label: cli-and-others
#| echo: true
#| results: hide
library(emo)
library(prettyunits)

duration <- as.difftime(20.214, units = "hours")
format_inline("{ji('horror')} this workshop feels {pretty_dt(duration)} long")
```

> `r format_inline("{ji('horror')} this workshop feels {pretty_dt(duration)} long")`

## Writing longer text

You can make a glue chunk as long as there is no line break or empty lines. 

<br>


````markdown
`r '' ````{glue}
#| label: glue-it
#| results: asis
#| echo: false
Did I say that there were **{length(groups)} groups** and _{num_samples}_ samples?
```
````

```{glue}
#| label: glue-it
#| results: asis
#| echo: false
Did I say that there were **{length(groups)} groups** and _{num_samples}_ samples?
```

## Writing longer text with `epoxy`

After loading `epoxy` you can make that type of chunk with line breaks and empty lines: 

<br>


````markdown
`r '' ````{epoxy}
#| label: epoxy-ramble
#| echo: false
I was talking to by boss yesterday and he told me about priorities
{.and paste0("1", letters[1:3])}. I said {.emph "'You can't be serious!'"}. 
Anyway the text in this chunk went to a new
line just to make a point. 

<br> 
  
{ji("point_up_2")} was an empty line and `<br>`!
```
````

```{epoxy}
#| label: epoxy-ramble
#| echo: false
I was talking to by boss yesterday and he told me about priorities
{.and paste0("1", letters[1:3])}. I said {.emph "'You can't be serious!'"}. 
Anyway the text in this chunk went to a new
line just to make a point. 

<br> 
  
{ji("point_up_2")} was an empty line and `<br>`!
```


## Options for tables

You might want to keep a browser tab open with the [Reproducible Research CRAN Task View](https://cran.r-project.org/web/views/ReproducibleResearch.html).  

<br> 

The primary contenders are:

- [`kableExtra`](https://haozhu233.github.io/kableExtra/)
- [`gt`](https://gt.rstudio.com/)

. . .

<br> 

`gt` is my choice based on its design and support, but also because of extensions:

- [`gtsummary`](https://www.danieldsjoberg.com/gtsummary/)
- [`gtExtras`](https://jthomasmock.github.io/gtExtras/)


(I don't convert many reports to Word though)

## gt is _very_ tidyverse

<br>


:::: {.columns}

::: {.column width="50%"}
```{r}
#| label: some-penguins-code
#| echo: true
#| eval: false
library(tidyverse)
library(gt)

set.seed(382)
select_penguins <- 
  penguins |> 
  slice_sample(n = 3, by = species) |> 
  select(species, contains("bill"), year)

select_penguins |> 
  gt()
```
:::

::: {.column width="50%"}
```{r}
#| label: some-penguins
#| echo: false
library(tidyverse)
library(gt)

set.seed(382)
select_penguins <- 
  penguins |> 
  slice_sample(n = 3, by = species) |> 
  select(species, contains("bill"), year)

select_penguins |> 
  gt()
```
:::

::::


## gt is _very_ tidyverse

<br>


:::: {.columns}

::: {.column width="50%"}
```{r}
#| label: some-penguins-cols-code
#| echo: true
#| eval: false
select_penguins |> 
  gt() |> 
  cols_label(
    contains("bill_len") ~ "length",
    contains("bill_dep") ~ "depth"
  )
```
:::

::: {.column width="50%"}
```{r}
#| label: some-penguins-cols
#| echo: false
select_penguins |> 
  gt() |> 
  cols_label(
    contains("bill_len") ~ "length",
    contains("bill_dep") ~ "depth"
  )
```
:::

::::


## gt is _very_ tidyverse

<br>


:::: {.columns}

::: {.column width="50%"}
```{r}
#| label: some-penguins-span-code
#| echo: true
#| eval: false
select_penguins |> 
  gt() |> 
  cols_label(
    contains("bill_len") ~ "length",
    contains("bill_dep") ~ "depth"
  ) |> 
  tab_spanner(
    label = "Bill", 
    columns = contains("bill")
  )
```
:::

::: {.column width="50%"}
```{r}
#| label: some-penguins-span
#| echo: false
select_penguins |> 
  gt() |> 
  cols_label(
    contains("bill_len") ~ "length",
    contains("bill_dep") ~ "depth"
  ) |> 
  tab_spanner(
    label = "Bill", 
    columns = contains("bill")
  )
```
:::

::::

etcetera, etcetera 


## Cross-referencing in Quarto

<br> 

:::: {.columns}

::: {.column width="50%"}

Before: 

````markdown
`r '' ````{r}
#| label: some-penguins

select_penguins |> 
  gt() |> 
  cols_label(
    contains("bill_len") ~ "length",
    contains("bill_dep") ~ "depth"
  ) |> 
  tab_spanner(
    label = "Bill", 
    columns = contains("bill")
  )
```
````
:::

::: {.column width="50%"}
After: 

````markdown
`r '' ````{r}
#| label: tbl-some-penguins
#| tbl-cap: "These penguins are the best."
select_penguins |> 
  gt() |> 
  cols_label(
    contains("bill_len") ~ "length",
    contains("bill_dep") ~ "depth"
  ) |> 
  tab_spanner(
    label = "Bill", 
    columns = contains("bill")
  )
```
````
:::

::::


<br>

In our report, we can use `@tbl-some-penguins` to produce `Table 1`.

## `gtsummary` descriptive statistics 


<br> 

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: summary-code
#| eval: false
#| echo: true

penguins |> 
tbl_summary(
  include = c(bill_len, bill_dep, island),
  by = species
) |> 
  add_n() |> 
  add_p() |> 
  modify_header(label = "**Predictor**") |> 
  bold_labels()
```

:::

::: {.column width="50%"}
```{r}
#| label: summary
#| echo: false

penguins |> 
tbl_summary(
  include = c(bill_len, bill_dep, island),
  by = species
) |> 
  add_n() |> 
  add_p() |> 
  modify_header(label = "**Predictor**") |> 
  bold_labels()
```

:::

::::

## `gtsummary` model summaries 


<br> 

:::: {.columns}

::: {.column width="50%"}

```{r}
#| label: summary-model-code
#| eval: false
#| echo: true

lm(bill_len ~ bill_dep + species, data = penguins,
   na.action = "na.omit") |>
  tbl_regression()
```

:::

::: {.column width="50%"}
```{r}
#| label: summary-model
#| echo: false

lm(bill_len ~ bill_dep + species, data = penguins,
   na.action = "na.omit") |>
  tbl_regression()
```

:::

::::


## `gtExtras` descriptive statistics + plot


<br> 

:::: {.columns}

::: {.column width="55%"}

```{r}
#| label: summarize
#| eval: false
#| echo: true
vertical_penguins <- 
  penguins |>
  select(-island, -species, -sex, -year) |>
  pivot_longer(
    everything(), 
    names_to = "Variable", values_to = "value"
  ) |>
  summarize(
    Mean = mean(value, na.rm = TRUE),
    `Std. Dev` = sd(value, na.rm = TRUE),
    Missing = mean(is.na(value)),
    Distribution = list(value),
    .by = c(Variable)
  ) 
```

```{r}
#| label: hist-code
#| eval: false
#| echo: true
vertical_penguins |> 
  gt() |> 
  fmt_number(columns = c(-Distribution), n_sigfig = 3) |>
  gt_plt_dist(
    Distribution, type = "histogram",
    line_color = "#222", fill_color = "white",
    same_limit = FALSE
  )
```

:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
```{r}
#| label: hist
#| echo: false
penguins |>
  select(-island, -species, -sex, -year) |>
  pivot_longer(
    everything(), 
    names_to = "Variable", 
    values_to = "value"
  ) |>
  summarize(
    Mean = mean(value, na.rm = TRUE),
    `Std. Dev` = sd(value, na.rm = TRUE),
    Missing = mean(is.na(value)),
    Distribution = list(value),
    .by = c(Variable)
  ) |>
  gt() |> 
  fmt_number(columns = c(-Distribution), n_sigfig = 3) |>
  gt_plt_dist(
    Distribution, type = "histogram",
    line_color = "#222", fill_color = "white",
    same_limit = FALSE
  )
```

<br> 

Add a `gt_theme_dark()`: 

```{r}
#| label: hist-dark
#| echo: false
penguins |>
  select(-island, -species, -sex, -year) |>
  pivot_longer(
    everything(), 
    names_to = "Variable", 
    values_to = "value"
  ) |>
  summarize(
    Mean = mean(value, na.rm = TRUE),
    `Std. Dev` = sd(value, na.rm = TRUE),
    Missing = mean(is.na(value)),
    Distribution = list(value),
    .by = c(Variable)
  ) |>
  gt() |> 
  fmt_number(columns = c(-Distribution), n_sigfig = 3) |>
  gt_plt_dist(
    Distribution, type = "histogram",
    line_color = "#222", fill_color = "white",
    same_limit = FALSE
  ) |> 
  gt_theme_dark()
```

:::

::::


## Figures

Like tables, Quarto has excellent cross-referencing

- use `label: fig-plot` to reference `@fig-plot` later

. . .

<br>

The two best resources about plots that I know: 

 - [_Taking Control of Plot Scaling_](https://www.tidyverse.org/blog/2020/08/taking-control-of-plot-scaling/)
 - [_Fonts in R_](https://www.tidyverse.org/blog/2025/05/fonts-in-r/)
 
Both by Thomas Lin Pedersen.

The first post shows how to [scale your ggplot](https://www.tidyverse.org/blog/2020/08/taking-control-of-plot-scaling/#the-solution) so that your points and text are not too large or small.  


# Part 3: Project Admin {background-color="#A60A3D"}

## ➡️

<https://rstats-wtf.github.io/wtf-personal-radmin-slides/>

## the onion

::: r-stack
![](img/project-onion-base.svg)
:::

## starting R

::: {style="text-align: center;"}
![](img/project-onion-starting-r.svg)
:::

## why?

Sometimes we want to change the way our code behaves *without* having to change the code.

::: notes
behaves might mean
- "what computer do I think I'm on"
- "is this dev or prod"?
:::

## R startup sequence {.smaller background-color="#cccccc"}

::: r-stack
![](img/R-startup.svg)
:::

## R startup sequence (our focus) {.smaller background-color="#cccccc"}

::: r-stack
![](img/r-startup-focus.svg)
:::

## `.Renviron`

environment variables

> a \[...\] named value that can affect the way running processes will behave on a computer

## what goes in `.Renviron`

:white_check_mark: R-specific environment variables\
:white_check_mark: API keys or other secrets\
:x: R code

## Editing `.Renviron`

<br/>

::: {.r-fit-text}
```{.r}
usethis::edit_r_environ(scope = ?)
```
:::
<br/>

::: columns
::: {.column width="40%"}
### user

`~/.Renviron`
:::

::: {.column width="60%"}
### project

`path/to/your/project/.Renviron`
:::
:::

## example `.Renviron`

``` bash
PATH="${RTOOLS40_HOME}\usr\bin;${PATH}" # windows users
CONNECT_API_KEY=DaYK2hBUriSBYUEGIAiyXsRJHSjTYJN3
R_HISTSIZE=100000
DB_USER=elephant
DB_PASS=p0stgr3s
```

## read environment variables

::: {.r .r-fit-text}
`Sys.getenv()`
:::


## edit your user `.Renviron` {.smaller}

1.  `usethis::edit_r_environ()`
2.  add `WTF_USER=<your name>_user`
3.  restart your R session\
    `CTRL + SHIFT + F10`\
    `CMD  + SHIFT + 0`
4.  Retrieve the value of WTF_USER `Sys.getenv("WTF_USER")`

{{< countdown "2:00" >}}

## edit your project `.Renviron` {.smaller}

1.  `usethis::edit_r_environ("project")`
2.  add `WTF_PROJECT=<your name>_project`
3.  restart your R session\
    `CTRL + SHIFT + F10`\
    `CMD  + SHIFT + 0`
4.  Retrieve the value of WTF_PROJECT `Sys.getenv("WTF_PROJECT")`

{{< countdown "2:00" >}}

::: question
what's the value of `WTF_USER` after you set `WTF_PROJECT`?
:::

## `.Renviron` recap

project `.Renviron` "short-circuits"
if it exists, your user `.Renviron` will not be evaluated

## `.Rprofile`

R code that runs at the start of each session

## ?interactive()

::: columns
::: column
### `TRUE`

:technologist: <br/>

-   sending individual lines of code to the console

<br/> <br/>

::: fragment
:point_up: most `.Rprofile` customization
:::
:::

::: column
### `FALSE`

:robot: <br/>

-   knitting an RMarkdown document
-   `R -e script.R`
:::
:::

## what to put in `.Rprofile`

-   set a default CRAN mirror
-   customize [R prompt](https://github.com/gaborcsardi/prompt/)

## what *not* to put in `.Rprofile`

If it matters for code you share, it **should not** be in `.Rprofile`

## why shouldn't these go in `.Rprofile`?

::: incremental
-   `library(tidyverse)`
-   `f <- dplyr::filter`
-   `theme_set(theme_bw())`
:::

## discuss with your neighbor

::: question
Why *might* these be safe to put in `.Rprofile`?
:::

<br>

``` r
library(usethis)
library(devtools)
```

{{< countdown "2:00" >}}

## dotfiles

::: r-fit-text
https://github.com/search?q=.Rprofile
:::

{{< fa brands github >}} [csgillespie/rprofile](https://github.com/csgillespie/rprofile)

{{< fa brands github >}} [klmr/rprofile](https://github.com/klmr/rprofile)

{{< fa brands github >}} [HenrikBengtsson/dotfiles-for-R](https://github.com/HenrikBengtsson/dotfiles-for-R)


## activity

::: panel-tabset
### edit your user `.Rprofile` {.smaller}

1.  `usethis::edit_r_profile()`
2.  add `print("from my user Rprofile")`
3.  restart your R session\
    `CTRL + SHIFT + F10`\
    `CMD  + SHIFT + 0`
4.  what value is printed when you restart?

### edit your project `.Rprofile` {.smaller}

1.  `usethis::edit_r_profile("project")`
2.  add `print("from my project Rprofile")`
3.  restart your R session\
    `CTRL + SHIFT + F10`\
    `CMD  + SHIFT + 0`
4.  what value is printed when you restart?
:::

{{< countdown "5:00" >}}

## `.Rprofile` recap

project `.Rprofile` "short-circuits"\
if it exists, your user `.Rprofile` will not be evaluated

## wrapping up

::: columns
::: column
### `.Renviron`

-   secrets
-   environment information
:::

::: column
### `.Rprofile`

-   development dependencies
:::
:::

::: notes
environment variables are inherited by child processes, so setting them early in the startup process is valuable Hosting providers trying to deal with secrets will often let you supply environment variables
:::

## reproducible environments

::: {style="text-align: center;"}
![](img/project-onion-reproducible-environments.svg)
:::

## [reproducibility strategies](https://solutions.posit.co/envs-pkgs/environments/)

![](https://solutions.posit.co/envs-pkgs/environments/reproduce/reproducibility-strategies-and-danger-zones.png)


::: notes
we're focused in particular on systems where we have both access and responsibility
:::

## tools

::: columns
::: column
### p3m

::: r-stack
![](img/icon-rspm.png){.r-stretch}
:::
:::

::: column
### renv

::: r-stack
![](img/renv-small.png){.r-stretch}
:::
:::
:::

::: notes
renv has a number of tools that are helpful for adopting a project-based workflow:
- lockfile records what packages you use and where you instaled them from
- `renv::install()` can handle installation from remote sources, local sources, package versions, bioconductor, rspm
- per-project library isolation with global package cache
- makes it easy to install experimental versions of packages and then roll back to a stable release if it doesn't work out
:::

## p3m

::: r-stack
![](img/icon-rspm.png){.r-stretch}
:::

## p3m: latest

![](img/p3m-latest.png) 

## p3m: date-based snapshots

![](img/rspm-2021-03-31-highlight.png)

## activity

::: question
time travel!
:::

1.  open the `wtf-explore-libraries` project
2.  run `packageVersion("dplyr")`

3.  update your project `.Rprofile` with a date-based snapshot of CRAN

    ``` {.r code-line-numbers="false"}
    options(repos = c(P3M = "https://p3m.dev/cran/2023-12-31"))
    ```

4.  Restart R

5.  `install.packages("dplyr")`

what version of dplyr did you install?

{{< countdown "5:00" >}}

##  ⏪

- remove the repository configuration from your project `.Rprofile`
- restart R
- reinstall whatever version of dplyr you were using before, e.g.:

  ```{.r code-line-numbers="false"}
  remotes::install_version("dplyr", "1.0.10")
  ```

if that process seems silly, :sparkles: [you should use `renv`](https://github.com/edavidaja/you-should-use-renv) :sparkles:

## renv

::: r-stack
![](img/renv-small.png){.r-stretch}
:::

## shared project environment

::: {data-id="env"}
```{mermaid}
%%{init: {"theme": "dark", "look": "handDrawn" } }%%
graph
L --- P1
L --- P2
L --- P3
L(library)
P1(project1)
P2(project2)
P3(project3)
```
:::

::: notes
-   by default all of your packages are installed into your user library
-   the unforunate default behavior in macOS is also that this is the system library
-   updating a package in the shared environments updates it for *all* of your projects
:::

<br/>

## shared project environment

### `.libPaths()`

``` {.r code-line-numbers="false"}
> .libPaths()
[1] "C:/Users/edavi/AppData/Local/R/win-library/4.4" # user
[2] "C:/Program Files/R/R-4.4.0/library" # system
```

## isolated project environments

::: {data-id="env"}
```{mermaid}
%%{init: {"theme": "dark", "look": "handDrawn" } }%%
graph
C --- L1
C --- L2
C --- L3
L1 --- P1
L2 --- P2
L3 --- P3
L1(library1)
L2(library2)
L3(library3)
P1(project1)
P2(project2)
P3(project3)
C(global cache)
```
:::

## isolated project environments

### `.libPaths()`

``` {.r code-line-numbers="false"}
- Project '~/sample-project' loaded. [renv 1.0.7]
> .libPaths()
[1] "C:/Users/edavi/Documents/sample-project/renv/library/windows/R-4.4/x86_64-w64-mingw32"
[2] "C:/Users/edavi/AppData/Local/R/cache/R/renv/sandbox/windows/R-4.4/x86_64-w64-mingw32/88765555"
```

## isolated project environments

-   experiment with new packages without breaking other projects
-   share exactly which versions you're using with your team or future you
-   re-use packages you've already installed

## activity

::: question
create an isolated project library
:::

`CMD|CTRL + SHIFT + P > Close Current Project`

```{.r}
usethis::create_project("~/wtf-renv") # or wherever you typically put projects
install.packages("renv")
renv::init()
renv::status()
```
{{< countdown "3:00" >}}

## activity

::: question
manage dependencies
:::

add `library(parallelly)` to any file in the `wtf-renv/R` directory

```{.r}
renv::status()
install.packages("parallelly")
renv::status()
renv::snapshot()
```
remove `library(parallelly)` from the file you added it to

```{.r}
renv::status()
```

{{< countdown "5:00" >}}

::: notes
run `.libPaths()` to see what your default package libraries are initialize an renv--you'll see that the environment is now local to the project note the .Rprofile that gets placed into your project, which runs an R script in `renv/activate.R` deactivate the environment and check libPaths() again--it should be back to normal
:::

## `renv.lock` {visibility="hidden"}

``` json
{
  "R": {
    "Version": "4.1.2",
    "Repositories": [
      {
        "Name": "CRAN",
        "URL": "https://cloud.r-project.org"
      }
    ]
  },
  "Packages": {
    [...]
    "knitr": {
      "Package": "knitr",
      "Version": "1.39",
      "Source": "Repository",
      "Repository": "CRAN",
      "Hash": "029ab7c4badd3cf8af69016b2ba27493",
      "Requirements": [
        "evaluate",
        "highr",
        "stringr",
        "xfun",
        "yaml"
      ]
    },
    ...
  }
}
```

::: notes
created from `renv::snapshot()` by default, identifies dependencies of your code for example: usethis doesn't usually appear in my lockfiles, because I'm running it interactively, rather than making it a dependency of my projects
:::

## `renv::install()`

or [`install.packages()`](https://rstudio.github.io/renv/articles/renv.html#shims) with shims enabled

``` r
renv::install("jsonlite")
renv::install("jsonlite@1.2") # at version
renv::install("jeroen/jsonlite") # latest
renv::install"jeroen/jsonlite@80854359976250f30a86a6992c0d8c3b3d95473d") # at SHA
renv::install("path/to/package") # local source
```

<hr>

::: fragment
``` r
devtools::install("jsonlite")
devtools::install_version("jsonlite@1.2") # at version
devtools::install_github("jeroen/jsonlite") # latest
devtools::install_github("jeroen/jsonlite@80854359976250f30a86a6992c0d8c3b3d95473d") # at SHA
devtools::install("path/to/package") # local source
```
:::

## the junk drawer

for reprexes, tweets, and other ephemera:

`~/Documents/scratch`

::: notes
I use `renv` for everything, and have one junk project into which I install things without regard for stability or reproducibility
:::
